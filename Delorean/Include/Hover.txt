{$INCLUDE ../../Common/CleoConstants.txt}
{$INCLUDE ../../Time/Include/Variables.txt}

:HoverConversion
// Check To see if we're going to hover.
if or
    Actor.InCar($PLAYER_ACTOR, vehicle)
    3F2A:   is_player_in_remote_mode_with_car vehicle
then
    // Can we convert?
    0B10: var1 = vehicle_flags AND FC_BIT  // Flying Circuits
    0B10: var2 = vehicle_flags AND FLYING_BIT   // Is car flying?
    0B10: var3 = vehicle_flags AND FC_FRIED_BIT // Fried
    if and
        not var1 == 0  // Flying circuits are installed
        not var2 == FLYING_TAKEOFF_BIT  // Not taking off
        not var2 == FLYING_LANDING_BIT // Not landing
        00E1: key_pressed 0 19
    then
        // Can only animated if flying circuits are fried and car is in flying mode
        if or
            not var2 == 0 // Not flying
            var3 == 0 // Flying circuits are fine
        then
            0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
            if
                var2 == 0 // Not flying
            then
                0B11: vehicle_flags = vehicle_flags OR FLYING_TAKEOFF_BIT
            else
                0B11: vehicle_flags = vehicle_flags OR FLYING_LANDING_BIT
            end
            stream_custom_script "Delorean/HoverAnimate.s" vehicle vehicle_flags
        end
    end
else
    // Automatic landing conversion
    0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
    Car.StorePos(vehicle, x, y, z)
    02CE: var2 = ground_z x y z
    0063: z -= var2
    if and
        var1 == FLYING_NOANIM_BIT // Flying
        z < 5.0
    then
        0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
        0B11: vehicle_flags = vehicle_flags OR FLYING_LANDING_BIT
        stream_custom_script "Delorean/HoverAnimate.s" vehicle vehicle_flags
    end
end
cleo_return 1 vehicle_flags

:CheckHoverAnimation
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
3F1C: get_car vehicle component "fxwheelrf_" rotation var2 var3 var4
0097: abs var3
if and
    var1 == FLYING_TAKEOFF_BIT
    var3 >= 89.0 // Wheels folded out
then
    0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
    0B11: vehicle_flags = vehicle_flags OR FLYING_NOANIM_BIT
else if and
    var1 == FLYING_LANDING_BIT
    3F3E: car vehicle wheels_on_ground
then
    0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
end
end
cleo_return 1 vehicle_flags

:Fly
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
0B10: var2 = vehicle_flags AND FC_FRIED_BIT   // Is car flying?

// Driving
if or
    var1 == 0 // Not flying
    not var2 == 0 // Fried flying circuits
then
    // Fade out vents and thrusters
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2rbon" 0 15
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2rfon" 0 15
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2lbon" 0 15
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2lfon" 0 15
    cleo_call @FadeComponent 4 vehicle "inner_vents" 0 15
    cleo_call @FadeComponent 4 vehicle "inner_ventsglow" 0 15
    cleo_return 0
end

// Wheel Lights
if
    not var1 == FLYING_LANDING_BIT
then
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2rbon" 255 5
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2rfon" 255 5
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2lbon" 255 5
    cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2lfon" 255 5
else
    // Fade out wheel lights once wheels are unfolded
    3F1C: get_car vehicle component "fxwheelrf_" rotation var1 var2 var3
    if
        var2 == 0.0
    then
        cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2rbon" 0 15
        cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2rfon" 0 15
        cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2lbon" 0 15
        cleo_call @FadeComponent 4 vehicle "fxthrusterbttf2lfon" 0 15
    end
end

// Hovering
3F05: set_car vehicle hover 1

// Sound
02E3: vehicle_speed = car vehicle speed
vehicle_speed /= 50.0
vehicle_speed += 1.0
3F97: set_sound "delorean/landspeeder_loop_lower_pitch.wav" index vehicle frequency vehicle_speed
02E3: vehicle_speed = car vehicle speed
vehicle_speed /= 100.0
vehicle_speed += 1.0
3F97: set_sound "delorean/engine_idle.wav" index vehicle frequency vehicle_speed

// Thrust
var4 = 0   // Alpha
var5 = 15  // Time to fade
if or
    Actor.InCar($PLAYER_ACTOR, vehicle)
    3F2A:   is_player_in_remote_mode_with_car vehicle
else_jump @FlyReturn

Car.StorePos(vehicle, x, y, z)
3F02: var1 = car vehicle engine_state
// Limit height
if or
    z >= HEIGHT_LIMIT
    var1 == 0  // Engine off
then
    0AB3: var VSOUND = 0
    jump @FlyReturn
end

// Boost
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
3F40: var2 = get_car vehicle component "bttf1" visiblility
3F40: var3 = get_car vehicle component "bttf2" visiblility

if and
    // Stage 1
    00E1:   key_pressed 0 6
    80E1:   not key_pressed 0 HOVER_ACCEL_KEY
then
    02E3: vehicle_speed = car vehicle speed
    vehicle_speed *= -0.1
    vehicle_speed += 11.0
    3F25: set_car vehicle forward_force vehicle_speed
    02E3: vehicle_speed = car vehicle speed
    gosub @HoverAccelerateSound
else if and
    // Brake/Reverse
    80E1:   not key_pressed 0 6
    00E1:   key_pressed 0 HOVER_ACCEL_KEY
then
    vehicle_speed = -5.0
    3F25: set_car vehicle forward_force vehicle_speed
else if and
    // Stage 2 (only when not landing)
    00E1:   key_pressed 0 6
    00E1:   key_pressed 0 HOVER_ACCEL_KEY
    not var1 == FLYING_LANDING_BIT
then
    // No booster on non-time machine variant
    if or
        not var2 == 0
        not var3 == 0
    then
        02E3: vehicle_speed = car vehicle speed
        vehicle_speed *= -0.16
        vehicle_speed += 20.0
        3F25: set_car vehicle forward_force vehicle_speed

        // Vent Glow
        var4 = 255  // Alpha
        var5 = 50   // Time to fade

        // Boost sounds
        gosub @HoverAccelerateSound
        gosub @HoverBoostSound
    end
else
end
end
end
0AB4: var1 = var ASOUND
02E3: vehicle_speed = car vehicle speed

// Decelerate sound
if and
    80E1:   not key_pressed 0 6
    not var1 == 0
then
    gosub @HoverDecelerateSound
end

// Reset booster sound
if or
    80E1:   not key_pressed 0 6
    80E1:   not key_pressed 0 HOVER_ACCEL_KEY
then
    0AB3: var VSOUND = 0
end

:FlyReturn
gosub @VentGlow
cleo_return 0

:VentGlow
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
0AB4: var2 = var CTIME
0607: var3 = get_current_weather
if or
    var2 >= 2020 // integer values
    var2 < 650 // integer values
    var3 == 2 // integer values
    var3 == 3 // integer values
    var3 == 5 // integer values
    var3 == 9 // integer values
    var3 == 10 // integer values
else_jump @VentGlowSet
if
    not var1 == FLYING_LANDING_BIT
else_jump @VentGlowSet
cleo_call @FadeComponent 4 vehicle "inner_vents" 255 15
jump @VentThrustGlow

:VentGlowSet
cleo_call @FadeComponent 4 vehicle "inner_vents" var4 var5

:VentThrustGlow
cleo_call @FadeComponent 4 vehicle "inner_ventsglow" var4 50
return