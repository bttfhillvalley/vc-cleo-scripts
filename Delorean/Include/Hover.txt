{$INCLUDE ../../Common/CleoConstants.txt}
{$INCLUDE ../../Time/Include/Variables.txt}

:HoverConversion
// Check To see if we're going to hover.
3F9B: var1 = get_car vehicle status
if
    not var1 == STATUS_PLAYER_DISABLED
then
    if or
        Actor.InCar($PLAYER_ACTOR, vehicle)
        3F2A:   is_player_in_remote_mode_with_car vehicle
    then
        // Can we convert?
        0B10: var1 = vehicle_flags AND FC_BIT  // Flying Circuits
        0B10: var2 = vehicle_flags AND FLYING_BIT   // Is car flying?
        0B10: var3 = vehicle_flags AND FC_FRIED_BIT // Fried
        if and
            not var1 == 0  // Flying circuits are installed
            00E1: key_pressed 0 19
        then
            if or
                var2 == 0 // Not flying
                var2 == FLYING_LANDING_BIT // Landing
            then
                // Don't convert if we're still animating
                3F1B: get_car vehicle component "strutunitrb_" pos x y z
                0097: abs x
                if or
                    x >= 0.01
                    not var3 == 0 // Fried Flying Circuits
                    3F50:   not is_car vehicle component "fxthrusterbttf2rf" visible // Thrusters are not installed
                then
                    cleo_return 1 vehicle_flags
                end
                0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
                0B11: vehicle_flags = vehicle_flags OR FLYING_TAKEOFF_BIT
                stream_custom_script "Delorean/HoverAnimate.s" vehicle vehicle_flags
            else if
                3F1C: get_car vehicle component "hoverjointrb_" rotation  x y z
                0097: abs y
                if
                    y < 89.0
                then
                    cleo_return 1 vehicle_flags
                end
                0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
                0B11: vehicle_flags = vehicle_flags OR FLYING_LANDING_BIT
                stream_custom_script "Delorean/HoverAnimate.s" vehicle vehicle_flags
            end
        end
        cleo_return 1 vehicle_flags
    end
end
if or
    var1 == STATUS_PHYSICS
    var1 == STATUS_PLAYER_DISABLED
then
    // Automatic landing conversion
    0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
    Car.StorePos(vehicle, x, y, z)
    02CE: var2 = ground_z x y z
    0063: z -= var2
    if and
        var1 == FLYING_NOANIM_BIT // Flying
        z < 5.0
    then
        0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
        0B11: vehicle_flags = vehicle_flags OR FLYING_LANDING_BIT
        stream_custom_script "Delorean/HoverAnimate.s" vehicle vehicle_flags
    end
end
cleo_return 1 vehicle_flags

:CheckHoverAnimation
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
3F1C: get_car vehicle component "hoverjointrb_" rotation var2 var3 var4
0097: abs var3
if and
    var1 == FLYING_TAKEOFF_BIT
    var3 >= 89.0 // Wheels folded out
then
    0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
    0B11: vehicle_flags = vehicle_flags OR FLYING_NOANIM_BIT
else if and
    var1 == FLYING_LANDING_BIT
    3F3E: car vehicle wheels_on_ground
then
    0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
    03ED: set_car vehicle not_damaged_when_upside_down 0

    if or
        Actor.InCar($PLAYER_ACTOR, vehicle)
        3F2A:   is_player_in_remote_mode_with_car vehicle
    then
        3F02: var1 = car vehicle engine_state
        if
            not var1 == 0
        then
            3F2D: set_car vehicle engine_sound 1
        end
    end
    3F91: stop_sound "delorean/engine_idle.wav" index vehicle
    3F91: stop_sound "delorean/landspeeder_loop_lower_pitch.wav" index vehicle
end
end
cleo_return 1 vehicle_flags

:Fly
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
0B10: var2 = vehicle_flags AND FC_FRIED_BIT   // Is car flying?

// Driving
if or
    var1 == 0 // Not flying
    not var2 == 0 // Fried flying circuits
then
    // Fade out vents and thrusters
    cleo_call @WheelGlow 3 vehicle alpha 0 step 15
    3F52: fade_car vehicle component "inner_vents" alpha 0 step 15
    3F52: fade_car vehicle component "inner_ventsglow" alpha 0 step 15
end

if
    var1 == 0
then
    cleo_return 0
end

// Wheel Lights
if
    not var1 == FLYING_LANDING_BIT
then
    cleo_call @WheelGlow 3 vehicle alpha 255 step 5
else
    // Fade out wheel lights once wheels are unfolded
    3F1C: get_car vehicle component "hoverjointrb_" rotation var1 var2 var3
    if
        var2 == 0.0
    then
        cleo_call @WheelGlow 3 vehicle alpha 0 step 15
    end
end

// Sound
02E3: vehicle_speed = car vehicle speed
vehicle_speed /= 50.0
vehicle_speed += 1.0
3F97: set_sound "delorean/landspeeder_loop_lower_pitch.wav" index vehicle frequency vehicle_speed
02E3: vehicle_speed = car vehicle speed
vehicle_speed /= 100.0
vehicle_speed += 1.0
3F97: set_sound "delorean/engine_idle.wav" index vehicle frequency vehicle_speed

0B10: var1 = vehicle_flags AND FC_FRIED_BIT   // Is car flying?
if and
    not var1 == 0
    3F92: is_sound_playing "delorean/landspeeder_loop_lower_pitch.wav" index vehicle
    3F93: is_sound_stopped "delorean/landspeeder_decelerate_lower_pitch.wav" index vehicle
then
    3F86: attach_sound "delorean/landspeeder_decelerate_lower_pitch.wav" to_car vehicle pos 0.0 0.0 0.0 loop 0 size 10.0
    3F98: set_sound "delorean/landspeeder_decelerate_lower_pitch.wav" index vehicle volume 0.5
    stream_custom_script "Delorean/HoverStop.s" vehicle
end

// Hovering
02E3: vehicle_speed = car vehicle speed
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is flying circuits fried?
0B10: var2 = vehicle_flags AND FC_FRIED_BIT   // Is flying circuits fried?
var4 = 0   // Alpha
var5 = 15  // Time to fade
if
    not var1 == FLYING_LANDING_BIT
then
    var1 = 0
end
if or
    3F40:   is_car vehicle component "bttf1" visible
    3F40:   is_car vehicle component "bttf2" visible
then
    3F05: var3 = set_car_hover vehicle boost 1 land var1 damaged var2
else
    3F05: var3 = set_car_hover vehicle boost 0 land var1 damaged var2
end

if or
    not var1 == 0
    not var2 == 0
then
    jump @FlyReturn
end

// Thrust
if or
    Actor.InCar($PLAYER_ACTOR, vehicle)
    3F2A:   is_player_in_remote_mode_with_car vehicle
else_jump @FlyReturn

Car.StorePos(vehicle, x, y, z)
3F02: var1 = car vehicle engine_state
// Limit height
if or
    z >= HEIGHT_LIMIT
    var1 == 0  // Engine off
then
    0AB3: var VSOUND = 0
    jump @FlyReturn
end

// Accelerate sound
3F66: get_joypad 0 throttle_to var1 var2
if and
    var1 >= 150
    var2 == 0
then
    gosub @HoverAccelerateSound
end

// Wheel Thruster
3F1C: get_car vehicle component "hoverjointrb_" rotation x y z
0097: abs y
3F66: get_joypad 0 throttle_to var1 var2
if and
    var1 < 150
    var2 == 0
    var3 == HOVER_UP
    y > 89.0
then
    cleo_call @Thruster 1 vehicle
    gosub @HoverThrusterSound
end

// Vent Boost
if
    var3 >= HOVER_BOOST
then
    // No booster on non-time machine variant
    if or
        3F40:   is_car vehicle component "bttf1" visible
        3F40:   is_car vehicle component "bttf2" visible
    then
        // Vent Glow
        var4 = 255  // Alpha
        var5 = 50   // Time to fade
        3F69: shake_pad 0 duration 50 freq 70

        // Boost sounds
        gosub @HoverAccelerateSound
        gosub @HoverBoostSound
    end
end
3F66: get_joypad 0 throttle_to var1 var2
0AB4: var2 = var ASOUND

// Decelerate sound
if and
    var1 < 150
    not var2 == 0
then
    gosub @HoverDecelerateSound
end

// Reset wheel thruster sound
3F66: get_joypad 0 throttle_to var1 var2
if or
    var1 >= 150
    var2 > 0
    not var3 == HOVER_UP
then
    0AB3: var TSOUND = 0
end

// Reset booster sound
if
    var3 < HOVER_BOOST
then
    0AB3: var VSOUND = 0
end

:FlyReturn
gosub @VentGlow
cleo_return 0

:WheelGlow
3F52: fade_car vehicle component "fxthrusterbttf2rbon" alpha 1@ step 2@
3F52: fade_car vehicle component "fxthrusterbttf2rfon" alpha 1@ step 2@
3F52: fade_car vehicle component "fxthrusterbttf2lbon" alpha 1@ step 2@
3F52: fade_car vehicle component "fxthrusterbttf2lfon" alpha 1@ step 2@
if
    3F50: not is_car vehicle component "fxwheelbttf1rb" visible
then
    1@ = 0
end
3F52: fade_car vehicle component "fxwheelbttf2rbon" alpha 1@ step 2@
3F52: fade_car vehicle component "fxwheelbttf2rfon" alpha 1@ step 2@
3F52: fade_car vehicle component "fxwheelbttf2lbon" alpha 1@ step 2@
3F52: fade_car vehicle component "fxwheelbttf2lfon" alpha 1@ step 2@
cleo_return 0

:Thruster
0AB4: var1 = var TSOUND
02E3: vehicle_speed = car vehicle speed
gosub @CalculateSpeedOffset
cleo_call @ThrusterParticle 6 vehicle -0.5 speed_offset var1 var2 var3 amount 0.75
cleo_call @ThrusterParticle 6 vehicle -0.75 speed_offset var1 var2 var3 amount 0.75
cleo_call @ThrusterParticle 6 vehicle -1.0 speed_offset var1 var2 var3 amount 0.75
cleo_call @ThrusterParticle 6 vehicle -1.25 speed_offset var1 var2 var3 amount 0.7
3F69: shake_pad 0 duration 50 freq 70
cleo_return 0

:ThrusterParticle
0407: create_coordinate x y z from_car vehicle offset -1.17951 -1.296 1@
gosub @ThrusterSpeedOffset
3F60: scatter_particle 2 var4 at x y z 0 0 0 RGBA  255 200 175 255 lifespan 10
0407: create_coordinate x y z from_car vehicle offset -1.17951 1.353 1@
gosub @ThrusterSpeedOffset
3F60: scatter_particle 2 var4 at x y z 0 0 0 RGBA  255 200 175 255 lifespan 10
0407: create_coordinate x y z from_car vehicle offset 1.17951 -1.296 1@
gosub @ThrusterSpeedOffset
3F60: scatter_particle 2 var4 at x y z 0 0 0 RGBA  255 200 175 255 lifespan 10
0407: create_coordinate x y z from_car vehicle offset 1.17951 1.353 1@
gosub @ThrusterSpeedOffset
3F60: scatter_particle 2 var4 at x y z 0 0 0 RGBA  255 200 175 255 lifespan 10
cleo_return 0

:ThrusterSpeedOffset
gosub @AddSpeedOffset
0208: 13@ = random_float -0.05 0.05
0208: 14@ = random_float -0.05 0.05
0208: 15@ = random_float -0.05 0.05
005B: x += 13@
005B: y += 14@
005B: z += 15@
return

:VentGlow
if and
    3F50:   not is_car vehicle component "bttf1" visible
    3F50:   not is_car vehicle component "bttf2" visible
then
    return
end
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
3F9D: var2 = get_car vehicle lights
if
    not var2 == 0
else_jump @VentGlowSet
if
    not var1 == FLYING_LANDING_BIT
else_jump @VentGlowSet
3F52: fade_car vehicle component "inner_vents" alpha 255 step 15
jump @VentThrustGlow

:VentGlowSet
3F52: fade_car vehicle component "inner_vents" alpha var4 step var5

:VentThrustGlow
3F52: fade_car vehicle component "inner_ventsglow" alpha var4 step 50
return
