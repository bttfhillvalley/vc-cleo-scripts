{$INCLUDE ../../Common/CleoConstants.txt}
{$INCLUDE ../../Time/Include/Variables.txt}

:HoverConversion
// Check To see if we're going to hover.
if or
    Actor.InCar($PLAYER_ACTOR, vehicle)
    3F2A:   is_player_in_remote_mode_with_car vehicle
then
    // Can we convert?
    0B10: var1 = vehicle_flags AND FC_BIT  // Flying Circuits
    0B10: var2 = vehicle_flags AND FLYING_BIT   // Is car flying?
    0B10: var3 = vehicle_flags AND FC_FRIED_BIT // Fried
    if and
        not var1 == 0  // Flying circuits are installed
        not var2 == FLYING_TAKEOFF_BIT  // Not taking off
        not var2 == FLYING_LANDING_BIT // Not landing
        00E1: key_pressed 0 19
    then
        // Can only animated if flying circuits are fried
        if or
            not var2 == 0 // Flying
            var3 == 0 // Flying circuits are fine
        then
            0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
            if
                var2 == 0 // Not flying
            then
                0B11: vehicle_flags = vehicle_flags OR FLYING_TAKEOFF_BIT
            else
                0B11: vehicle_flags = vehicle_flags OR FLYING_LANDING_BIT
            end
            stream_custom_script "TimeTrain/HoverAnimate.s" vehicle vehicle_flags
        end
    end
else
    // Automatic landing conversion
    0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
    Car.StorePos(vehicle, x, y, z)
    02CE: var2 = ground_z x y z
    0063: z -= var2
    if and
        var1 == FLYING_NOANIM_BIT // Flying
        z < 15.0
    then
        0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
        0B11: vehicle_flags = vehicle_flags OR FLYING_LANDING_BIT
        stream_custom_script "TimeTrain/HoverAnimate.s" vehicle vehicle_flags
    end
end
cleo_return 1 vehicle_flags

:CheckHoverAnimation
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
3F1C: get_car vehicle component "middlewing_2_r" rotation var2 var3 var4
0097: abs var4
if and
    var1 == FLYING_TAKEOFF_BIT
    var4 >= 10.0 // Wing out
then
    0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
    0B11: vehicle_flags = vehicle_flags OR FLYING_NOANIM_BIT
else if and
    var1 == FLYING_LANDING_BIT
    3F3E: car vehicle wheels_on_ground
then
    0B10: vehicle_flags = vehicle_flags AND FLYING_BITMASK
end
end
cleo_return 1 vehicle_flags

:Fly
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
0B10: var2 = vehicle_flags AND FC_FRIED_BIT   // Is car flying?
3F05: set_car_hover vehicle land var1 damaged var2

if or
    var1 == 0 // Not flying
    not var2 == 0 // Fried flying circuits
then
    3F52: fade_car vehicle component "inner_vents" alpha 0 step 15
    3F52: fade_car vehicle component "inner_ventsglow" alpha 0 step 15
    3F52: fade_car vehicle component "locothrusteron" alpha 0 step 15
    3F52: fade_car vehicle component "bogie1locothrusteron" alpha 0 step 15
    cleo_return 0
end

// Hovering
if or
    not var1 == 0
    not var2 == 0
then
    jump @FlyReturn
end

// Thrusters
3F52: fade_car vehicle component "locothrusteron" alpha 255 step 15
3F52: fade_car vehicle component "bogie1locothrusteron" alpha 255 step 15

// Thrust
var4 = 0   // Alpha
if or
    Actor.InCar($PLAYER_ACTOR, vehicle)
    3F2A:   is_player_in_remote_mode_with_car vehicle
else_jump @FlyReturn

Car.StorePos(vehicle, x, y, z)
3F02: var1 = car vehicle engine_state

// Limit height
if or
    z >= HEIGHT_LIMIT
    var1 == 0  // Engine off
then
    0AB3: var VSOUND = 0
    jump @FlyReturn
end

0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
if and
    // Stage 1
    00E1:   key_pressed 0 6
    80E1:   not key_pressed 0 HOVER_ACCEL_KEY
then
    02E3: vehicle_speed = car vehicle speed
    vehicle_speed *= -0.1
    vehicle_speed += 11.0
    vehicle_speed *= 10.0
    3F25: set_car vehicle forward_force vehicle_speed
    3F52: fade_car vehicle component "inner_ventsglow" alpha 0 step 50
else if and
    // Reverse
    80E1:   not key_pressed 0 6
    00E1:   key_pressed 0 HOVER_ACCEL_KEY
then
    vehicle_speed = -5.0
    vehicle_speed *= 10.0
    3F25: set_car vehicle forward_force vehicle_speed
    3F52: fade_car vehicle component "inner_ventsglow" alpha 0 step 50
else if and
    // Stage 2 (only when not landing)
    00E1:   key_pressed 0 6
    00E1:   key_pressed 0 HOVER_ACCEL_KEY
    not var1 == FLYING_LANDING_BIT  // Not landing
then
    02E3: vehicle_speed = car vehicle speed
    vehicle_speed *= -0.1
    vehicle_speed += 20.0
    vehicle_speed *= 10.0
    3F25: set_car vehicle forward_force vehicle_speed

    // Vent Glow
    var4 = 255  // Alpha

    // Boost sounds
    gosub @HoverBoostSound
else
    3F52: fade_car vehicle component "inner_ventsglow" alpha 0 step 50
end
end
end

// Reset booster sound
if or
    80E1:   not key_pressed 0 6
    80E1:   not key_pressed 0 HOVER_ACCEL_KEY
then
    0AB3: var VSOUND = 0
end

:FlyReturn
gosub @VentGlow
cleo_return 0

:VentGlow
0B10: var1 = vehicle_flags AND FLYING_BIT   // Is car flying?
3F1C: get_car vehicle component "wheels_r_dummy" rotation var1 var2 var3
0097: abs var2
if or
    var2 > 89.0
    var4 > 0
then
    3F52: fade_car vehicle component "inner_vents" alpha 255 step 15
else
    3F52: fade_car vehicle component "inner_vents" alpha 0 step 15
end
3F52: fade_car vehicle component "inner_ventsglow" alpha var4 step 50
return

:CalculateTenderSpeedOffset
// Tender offset
2@ -= TENDER_Y
3@ -= TENDER_Z
3F1D: get_car vehicle component "tender" offset 1@ 2@ 3@ store_to 1@ 2@ 3@
02E3: 4@ = car vehicle speed
if
    not 4@ == 0.0
then
    4@ /= 30.0
    3F33: get_car vehicle velocity_direction 5@ 6@ 7@
    006B: 5@ *= 4@
    006B: 6@ *= 4@
    006B: 7@ *= 4@
    005B: 1@ += 5@
    005B: 2@ += 6@
    005B: 3@ += 7@
end
cleo_return 3 1@ 2@ 3@